import { createViemTest } from "@morpho-org/test/vitest";
import { mainnet } from "viem/chains";
import { describe, expect } from "vitest";
import { Vault } from "../src/augment/Vault";
import { addresses, ChainId, Version } from "@hopperlabsxyz/v0-core";


const UINT256_MAX = 2n ** 256n - 1n;

export const test = createViemTest(mainnet, {
  forkUrl: process.env.MAINNET_RPC_URL,
  forkBlockNumber: 22_253_107,
});

// test vault
const tacUSN = new Vault({
  address: '0x7895A046b26CC07272B022a0C9BAFC046E6F6396',
  name: 'Noon tacUSN',
  symbol: 'tacUSN',
  decimals: 18,
  price: undefined,
  asset: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
  underlyingDecimals: 6,
  totalAssets: 0n,
  newTotalAssets: UINT256_MAX,
  depositEpochId: 1,
  depositSettleId: 1,
  lastDepositEpochIdSettled: 0,
  redeemEpochId: 2,
  redeemSettleId: 2,
  lastRedeemEpochIdSettled: 0,
  pendingSilo: '0x65D57bb5fB43fc227518D7c983e83388D4017687',
  wrappedNativeToken: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
  decimalsOffset: 12,
  totalAssetsExpiration: 0n,
  totalAssetsLifespan: 0n,
  feeRegistry: addresses[ChainId.EthMainnet].feeRegistry,
  newRatesTimestamp: 1744463627n,
  lastFeeTime: 0n,
  highWaterMark: 1000000n,
  cooldown: 0n,
  feeRates: { managementRate: 50, performanceRate: 1000 },
  owner: '0xA766CdA5848FfD7D33cE3861f6dc0A5EE38f3550',
  pendingOwner: '0x0000000000000000000000000000000000000000',
  whitelistManager: '0x0000000000000000000000000000000000000000',
  feeReceiver: '0xa336DA6a81EFfa40362D2763d81643a67C82D151',
  safe: '0xA766CdA5848FfD7D33cE3861f6dc0A5EE38f3550',
  valuationManager: '0xF53eAeB7e6f15CBb6dB990eaf2A26702e1D986d8',
  state: 0,
  isWhitelistActivated: false,
  version: Version.v0_4_0
})

describe("augment/Vault", () => {
  test("should fetch vault data", async ({ client }) => {
    const expectedValue = tacUSN;
    const value = await Vault.fetch("0x7895A046b26CC07272B022a0C9BAFC046E6F6396", client);
    expect(value).toStrictEqual(expectedValue);
  });

  test("should encode initialize call", async ({ client }) => {
    const expectedValue = "0x660b88ee00000000000000000000000000000000000000000000000000000000000000600000000000000000000000006da4d1859ba1d02d095d2246142cdad52233e27c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000a766cda5848ffd7d33ce3861f6dc0a5ee38f35500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f53eaeb7e6f15cbb6db990eaf2a26702e1d986d8000000000000000000000000a766cda5848ffd7d33ce3861f6dc0a5ee38f3550000000000000000000000000a336da6a81effa40362d2763d81643a67c82d151000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e6f6f6e2074616355534e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000674616355534e0000000000000000000000000000000000000000000000000000"
    const value = tacUSN.initializeEncoded();
    expect(value).toStrictEqual(expectedValue);
  });

  test("should encode silo constructor call", async ({ client }) => {
    const expectedValue = "0x000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
    const value = tacUSN.siloConstructorEncoded();
    expect(value).toStrictEqual(expectedValue);
  });

  test("should encode beacon proxy constructor call", async ({ client }) => {
    const expectedValue = "0x00000000000000000000000009c8803f7dc251f9faae5f56e3b91f8a6d0b70ee000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a4660b88ee00000000000000000000000000000000000000000000000000000000000000600000000000000000000000006da4d1859ba1d02d095d2246142cdad52233e27c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000a766cda5848ffd7d33ce3861f6dc0a5ee38f35500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f53eaeb7e6f15cbb6db990eaf2a26702e1d986d8000000000000000000000000a766cda5848ffd7d33ce3861f6dc0a5ee38f3550000000000000000000000000a336da6a81effa40362d2763d81643a67c82d151000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e6f6f6e2074616355534e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000674616355534e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    const value = tacUSN.beaconProxyConstructorEncoded(addresses[ChainId.EthMainnet].beaconProxyFactory);
    expect(value).toStrictEqual(expectedValue);
  });
});
